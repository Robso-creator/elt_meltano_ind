version: '3'

x-meltano-image: &meltano-image
  image: meltano/meltano:latest-python3.10
  command: lock --update --all
  volumes:
    - .:/project

services:
  postgres:
    image: postgres:12
    env_file:
      - .env
    environment:
      POSTGRES_DB: elt_meltano
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/northwind.sql:/docker-entrypoint-initdb.d/northwind.sql
    networks:
      docker_network:
        ipv4_address: 172.19.0.20
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d elt_meltano"]
      interval: 5s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: elasticsearch:8.0.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    networks:
      docker_network:
        ipv4_address: 172.19.0.21

  neo4j:
    image: neo4j:4.2
    environment:
      - NEO4J_AUTH=neo4j/test
    ulimits:
      nofile:
        soft: 40000
        hard: 40000
    volumes:
      - ./amundsen/docker/neo4j/conf:/var/lib/neo4j/conf
      - neo4j_data:/data
    ports:
      - 7474:7474
      - 7687:7687
    networks:
      docker_network:
        ipv4_address: 172.19.0.22

  amundsen-metadata:
    image: amundsendev/amundsen-metadata:3.11.0
    depends_on:
      - neo4j
    networks:
      docker_network:
        ipv4_address: 172.19.0.23
    environment:
       - PROXY_HOST=bolt://neo4j_amundsen
    command: gunicorn -w 2 --bind :5000 metadata_service.metadata_wsgi

  amundsen-search:
    image: amundsendev/amundsen-search:4.0.2
    depends_on:
      - elasticsearch
    networks:
      docker_network:
        ipv4_address: 172.19.0.24
    environment:
      - PROXY_ENDPOINT=es_amundsen
    command: gunicorn -w 2 --bind :5000 search_service.search_wsgi

  amundsen-frontend:
    image: amundsendev/amundsen-frontend:4.2.0
    depends_on:
      - amundsen-metadata
      - amundsen-search
    ports:
      - "5000:5000"
    networks:
      docker_network:
        ipv4_address: 172.19.0.25
    environment:
      - SEARCHSERVICE_BASE=http://amundsensearch:5000
      - METADATASERVICE_BASE=http://amundsenmetadata:5000
      # Only for easy config-less Quickstart bookmark evalutation. `TestConfig` extends ordinary `LocalConfig` by
      # defining `AUTH_USER_METHOD` to a hardcoded dummy user in `amundsen_application.tests.test_utils.get_test_user()`
      # See further docs in https://github.com/amundsen-io/amundsenfrontendlibrary/blob/master/docs/configuration.md#flask
      # and https://github.com/amundsen-io/amundsenfrontendlibrary/blob/master/docs/configuration.md#authentication
      - FRONTEND_SVC_CONFIG_MODULE_CLASS=amundsen_application.config.TestConfig
    command: gunicorn -w 2 --bind :5000 amundsen_application.wsgi

  meltano-install:
    <<: *meltano-image
    command: install
    networks:
      docker_network:
    depends_on:
      postgres:
        condition: service_healthy

  airflow-scheduler:
    <<: *meltano-image
    command: invoke airflow scheduler
    networks:
      docker_network:
    depends_on:
      postgres:
        condition: service_healthy
      meltano-install:
        condition: service_completed_successfully
    restart: unless-stopped

  airflow-webserver:
    <<: *meltano-image
    command: invoke airflow webserver
    networks:
      docker_network:
    depends_on:
      postgres:
        condition: service_healthy
      meltano-install:
        condition: service_completed_successfully
    ports:
      - "8080:8080"
    restart: unless-stopped

  streamlit-app:
    image: streamlit_app:1.0
    restart: always
    env_file:
      - .env
    ports:
      - "8501:8501"
    user: "1000:1000"
    networks:
      docker_network:
    depends_on:
      postgres:
        condition: service_healthy
      meltano-install:
        condition: service_completed_successfully

volumes:
  postgres_data:
  es_data:
  neo4j_data:

networks:
  docker_network:
      driver: bridge
      ipam:
        config:
          - subnet: 172.19.0.0/16
